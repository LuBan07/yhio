import{_ as s,o as a,c as n,S as l}from"./chunks/framework.980ea825.js";const F=JSON.parse('{"title":"关于 Node.js","description":"","frontmatter":{},"headers":[],"relativePath":"pages/node/index.md","filePath":"pages/node/index.md","lastUpdated":null}'),o={name:"pages/node/index.md"},e=l(`<h1 id="关于-node-js" tabindex="-1">关于 <a href="https://nodejs.org/en/docs" target="_blank" rel="noreferrer">Node.js</a> <a class="header-anchor" href="#关于-node-js" aria-label="Permalink to &quot;关于 [Node.js](https://nodejs.org/en/docs)&quot;">​</a></h1><p>作为一个异步事件驱动的 JavaScript 运行时，Node.js 被设计用来构建可扩展的网络应用。在下面的 “Hello World” 示例中，可以并发处理许多连接，每一个连接都会触发一个回调，而当没有可做的事情时，Node.js 就会进入休眠状态。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> http </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> hostname </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">127.0.0.1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> port </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> server </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> http</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createServer</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">req</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">res</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">statusCode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">200</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setHeader</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Content-Type</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">text/plain</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">end</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello World</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">server</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">listen</span><span style="color:#A6ACCD;">(port</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> hostname</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">Server running at http://</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">hostname</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">:</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">port</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>这与当今比较常见的采用操作系统线程的并发模型形成了鲜明对比。基于线程的网络效率相对较低且更难以使用。此外，由于没有锁，Node.js 的用户不用担心进程死锁的问题。Node.js 中几乎没有函数直接执行 I/O 操作（除非你使用 Node.js 标准库中的同步函数版本），其进程从不会被阻塞，因此用 Node.js 来开发可扩展系统是非常合理的。</p><h2 id="安装方式" tabindex="-1">安装方式 <a class="header-anchor" href="#安装方式" aria-label="Permalink to &quot;安装方式&quot;">​</a></h2><ul><li><a href="https://nodejs.org/en/download" target="_blank" rel="noreferrer"><code>nodejs</code></a>官网直傻瓜式点点点安装 （不足：切版本费事）</li><li>使用<code>nvm</code>管理node版本，进行管理（强烈推荐）</li><li>n管理工具</li></ul><h3 id="brew安装node-js-我的电脑安装方式-macos系统" tabindex="-1">Brew安装Node.js(我的电脑安装方式：macOs系统) <a class="header-anchor" href="#brew安装node-js-我的电脑安装方式-macos系统" aria-label="Permalink to &quot;Brew安装Node.js(我的电脑安装方式：macOs系统)&quot;">​</a></h3><p>Node.js 是一个开源的、跨平台的、用于服务器端的 JavaScript 运行环境。它能够让 JavaScript 运行在服务器端，使得开发者能够使用 JavaScript 开发服务器端的应用程序。</p><p>Brew 是 macOS 上最流行的开源包管理工具之一，它提供了用于安装、更新和管理各种软件包的简单命令行界面。在本文中，我们将学习如何使用 Brew 安装 Node.js。</p><h4 id="一、检查-brew-版本" tabindex="-1">一、检查 Brew 版本 <a class="header-anchor" href="#一、检查-brew-版本" aria-label="Permalink to &quot;一、检查 Brew 版本&quot;">​</a></h4><p>在安装 Node.js 之前，最好检查一下 Brew 是否已安装并且已更新到最新版本。若没有安装，你可以使用以下命令进行安装：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">/bin/bash</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-c</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;$(</span><span style="color:#FFCB6B;">curl</span><span style="color:#C3E88D;"> -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh</span><span style="color:#89DDFF;">)&quot;</span></span></code></pre></div><p>如果已安装，可以使用以下命令将其更新到最新版本：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">brew</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">update</span></span></code></pre></div><p>可以使用以下命令来验证 Brew 是否已正确安装：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">brew</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--version</span></span></code></pre></div><p>输出应该类似于：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">Homebrew</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3.2</span><span style="color:#C3E88D;">.2</span></span></code></pre></div><h4 id="二、使用-brew-安装-node-js" tabindex="-1">二、使用 Brew 安装 Node.js <a class="header-anchor" href="#二、使用-brew-安装-node-js" aria-label="Permalink to &quot;二、使用 Brew 安装 Node.js&quot;">​</a></h4><p>使用 Brew 安装 Node.js 非常简单，只需要在终端中运行以下命令：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">brew</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">node</span></span></code></pre></div><p>在安装过程中，终端可能会向你询问是否允许安装一些依赖项。只需要输入 y 或回车即可。安装完成后，可以使用以下命令确认 Node.js 是否已正确安装：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">node</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--version</span></span></code></pre></div><p>输出应该类似于：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">v14.17.0</span></span></code></pre></div><h4 id="三、更换-node-js-版本" tabindex="-1">三、更换 Node.js 版本 <a class="header-anchor" href="#三、更换-node-js-版本" aria-label="Permalink to &quot;三、更换 Node.js 版本&quot;">​</a></h4><p>在使用 Brew 安装的 Node.js 中，可以使用 nvm 或 n 来管理多个 Node.js 版本。下面我们介绍使用 nvm 更换 Node.js 版本的方法：</p><h4 id="_1-安装-nvm" tabindex="-1">1. 安装 nvm <a class="header-anchor" href="#_1-安装-nvm" aria-label="Permalink to &quot;1. 安装 nvm&quot;">​</a></h4><p>使用以下命令安装 nvm：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">curl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-o-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">bash</span></span></code></pre></div><p>安装完成后，重新启动终端。</p><h4 id="_2-安装其他版本的-node-js" tabindex="-1">2. 安装其他版本的 Node.js <a class="header-anchor" href="#_2-安装其他版本的-node-js" aria-label="Permalink to &quot;2. 安装其他版本的 Node.js&quot;">​</a></h4><p>使用以下命令安装 Node.js 的其他版本，例如 12.22.1：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">nvm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">12.22</span><span style="color:#C3E88D;">.1</span></span></code></pre></div><p>安装完成后，使用以下命令来切换到新版本：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">nvm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">use</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">12.22</span><span style="color:#C3E88D;">.1</span></span></code></pre></div><p>可以使用以下命令确认 Node.js 是否已切换到新版本：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">node</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--version</span></span></code></pre></div><p>输出应该类似于：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">v12.22.1</span></span></code></pre></div><h4 id="_3-设置默认-node-js-版本" tabindex="-1">3. 设置默认 Node.js 版本 <a class="header-anchor" href="#_3-设置默认-node-js-版本" aria-label="Permalink to &quot;3. 设置默认 Node.js 版本&quot;">​</a></h4><p>可以使用以下命令将 Node.js 的默认版本设置为已安装的任何版本：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">nvm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">alias</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">12.22</span><span style="color:#C3E88D;">.1</span></span></code></pre></div><p>每次启动终端后，将自动使用该版本</p><h4 id="四、卸载-node-js" tabindex="-1">四、卸载 Node.js <a class="header-anchor" href="#四、卸载-node-js" aria-label="Permalink to &quot;四、卸载 Node.js&quot;">​</a></h4><p>如果需要卸载通过 Brew 安装的 Node.js，可以使用以下命令：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">brew</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">uninstall</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">node</span></span></code></pre></div><p>卸载与 Node.js 相关的所有软件包。</p>`,48),p=[e];function t(c,r,i,y,C,d){return a(),n("div",null,p)}const h=s(o,[["render",t]]);export{F as __pageData,h as default};
